# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'scratch.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets

import Google_News_Scrapper
import HeatMap
from SentimentAnalysis import SentimentAnalysis
from StatisticalInformation import Stats
stats = Stats()
import yfinance as yf
import pendulum
import matplotlib.pyplot as plt

class Ui_Widget(object):
    def __int__(self):
        self.company_articles = Google_News_Scrapper.ScrapeArticles('', '08/01/2021', '8/07/2021')

    # Formats and resizes the buttons and label on the application
    # DO NOT MESS WITH UNLESS YOU KNOW WHAT YOU'RE DOING!!!!!!!!!!
    def setupUi(self, Widget):
        Widget.setObjectName("Widget")
        Widget.resize(800, 600)
        self.pushButton = QtWidgets.QPushButton(Widget)
        self.pushButton.setGeometry(QtCore.QRect(60, 220, 75, 21))
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(Widget)
        self.pushButton_2.setGeometry(QtCore.QRect(60, 170, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(Widget)
        self.pushButton_3.setGeometry(QtCore.QRect(60, 270, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")

        self.pushButton_4 = QtWidgets.QPushButton(Widget)
        self.pushButton_4.setGeometry(QtCore.QRect(60, 320, 75, 21))
        self.pushButton_4.setObjectName("pushButton_4")

        self.lineEdit = QtWidgets.QLineEdit(Widget)
        self.lineEdit.setGeometry(QtCore.QRect(230, 100, 381, 20))
        self.lineEdit.setObjectName("lineEdit")

        self.label = QtWidgets.QLabel(Widget)
        self.label.setGeometry(QtCore.QRect(60, 80, 91, 61))
        self.label.setObjectName("label")

        self.textEdit = QtWidgets.QTextEdit(Widget)
        self.textEdit.setGeometry(QtCore.QRect(233, 130, 371, 161))
        self.textEdit.setObjectName("textEdit")

        ############################################## RESIZE
        self.pushButton.resize(150,50)
        self.pushButton_2.resize(150,50)
        self.pushButton_3.resize(150, 50)
        self.pushButton_4.resize(150, 50)
        self.label.resize(150,50)
        self.textEdit.resize(349,250)
        self.lineEdit.resize(350,25)
        # self.label.adjustSize()
        # self.pushButton.adjustSize()
        # self.textEdit.adjustSize()
        # self.pushButton.adjustSize()
        # self.pushButton_2.adjustSize()
        # self.pushButton_3.adjustSize()

        self.retranslateUi(Widget)
        QtCore.QMetaObject.connectSlotsByName(Widget)

    # Connects all the buttons displayed on the application so that when a button is clicked or enter
    # it will then call the function/method to be started.
    def retranslateUi(self, Widget):
        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle(_translate("Widget", "ADK TERMINAL"))
        self.pushButton.setText(_translate("Widget", "HEAT MAP"))
        self.pushButton_2.setText(_translate("Widget", "STOCK PRICE"))
        self.pushButton_3.setText(_translate("Widget", "SUMMARY"))
        self.pushButton_4.setText(_translate("Widget", "Pie Chart"))

        self.label.setText(_translate("Widget", "ENTER TICKER"))

        self.lineEdit.editingFinished.connect(self.edit_line)
        self.pushButton_2.clicked.connect(self.show_stock)
        self.pushButton.clicked.connect(self.heat_map)
        self.pushButton_3.clicked.connect(self.summary)
        self.pushButton_4.clicked.connect(self.show_pie_chart)

    # This allows the user to enter a company ticker into the lineEdit box, which then is passed into the Scraper.
    def edit_line(self):
        enter_ticker = self.lineEdit.text()
        self.company_articles = Google_News_Scrapper.ScrapeArticles(enter_ticker, '08/01/2021', '8/07/2021')

    # Will eventually call and display stats info about each company we research
    def show_stock(self):
        enter_ticker = self.lineEdit.text()
        price_history = yf.Ticker(enter_ticker).history(period='2y',  # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
                                                  interval='1wk',
                                                  # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo
                                                  actions=False)
        time_series = list(price_history['Open'])
        dt_list = [pendulum.parse(str(dt)).float_timestamp for dt in list(price_history.index)]
        plt.style.use('dark_background')
        plt.plot(dt_list, time_series, linewidth=2)
        plt.show()

    def show_pie_chart(cls):
        values = stats.read_lines()
        stats.pie_chart(values)

    # JUST a heat map bro
    @classmethod
    def heat_map(cls):
        heat = HeatMap.show_heat_map()

    # When summary button is clicked it will call the first article that is in the list and display it to the user
    def summary(self, ticker):
        sentiment = SentimentAnalysis()
        sentiment.lexical_article_analyze(self.company_articles.search_articles()[0][0:5])
        self.textEdit.clear()
        self.textEdit.insertPlainText(sentiment.summary[1])
        print("34")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Widget = QtWidgets.QWidget()
    ui = Ui_Widget()
    ui.setupUi(Widget)
    Widget.show()
    sys.exit(app.exec_())
